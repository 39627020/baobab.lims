<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
            metal:use-macro="here/main_template/macros/master"
      i18n:domain="bika">

<head>

    <metal:javascript_head_slot fill-slot="javascript_head_slot">
        <!--?<script type="text/javascript" charset="utf-8"-->
                <!--?tal:define="navroot context/@@plone_portal_state/navigation_root_url"-->
                <!--?tal:attributes="href string:${navroot}/++resource++bika.sanbi.js/d3.v3.js"></script>-->

        <script type="text/javascript" charset="utf-8">
            (function($) {
              $(function() {
                  // Get Positions info
                  var path = window.location.href.split('/graphic')[0] + '/positions_info';
                  $.getJSON(path, function(data){
                      if (data['positions'].length > 0){
                          createGraphic(data);
                      }
                  });

                  function positionInfo(element, d){
                      $("div#pos-info-div").removeClass("hidden");
                      var chain = d["chain"];
                      var state = "";
                      var color = ";"
                      switch(d["state"]){
                          case "position_free":
                              state = "Available";
                              color = "green";
                              break;
                          case "position_reserved":
                              state = "Reserved";
                              color = "yellow";
                              break;
                          case "position_occupied":
                              state = "Occupied";
                              color = "red";
                              break;
                          default:
                              break;
                      }
                      var html = "<table class='pos-info'>" +
                        "<tbody>" +
                        "<tr><td> Address </td>" +
                        "<td>" + chain[chain.length - 1] + "</td><tr>" +
                        "<tr><td> Room </td>" +
                        "<td>" + chain[0] + "</td><tr>" +
                        "<tr><td> Freezer/Tank </td>" +
                        "<td>" + chain[1] + "</td><tr>" +
                        "<tr><td> Shelf/Cannister </td>" +
                        "<td>" + chain[2] + "</td><tr>" +
                        "<tr><td> Box/Cane </td>" +
                        "<td>" + chain[3] + "</td><tr>" +
                        "<tr><td> Current State </td>"  +
                        "<td style=\"color:" + color + "; \">" + state + "</td></tr>" +
                        "</tbody></table>";

                      $("div#pos-info-div table").remove();
                      $("div#pos-info-div").append(html);

                  }

                  function createGraphic(data){
                      // TODO: THIS PART SHOULD BE IN DIFFERENT FUNCTION
                      var totalPositions = data["positions"].length;
                      var freePositions = 0, reservedPositions = 0, occupiedPositions = 0;
                      for(var i = 0; i < totalPositions; i++){
                          switch(data["positions"][i]["state"]){
                              case 'position_free':
                                  freePositions += 1;
                                  break;
                              case 'position_reserved':
                                  reservedPositions += 1;
                                  break;
                              case 'position_occupied':
                                  occupiedPositions += 1;
                                  break;
                              default: break;
                          }
                      }
                      var html = "<table class='box-info'>" +
                        "<tbody>" +
                        "<tr><td> Total Positions </td>" +
                        "<td>" + data['positions'].length + "</td><tr>" +
                        "<tr><td> Available Positions </td>" +
                        "<td>" + freePositions + "</td><tr>" +
                        "<tr><td> Reserved Positions </td>"  +
                        "<td>" + reservedPositions + "</td></tr>" +
                        "<tr><td> Occupied Positions</td>"   +
                        "<td>" + occupiedPositions + "</td></tr>" +
                        "</tbody></table>";

                      $("#stats").append(html);


                      var w = 500;
                      var h = 500;
                      var padding = 3;
                      var marginTop = 30;
                      var marginLeft = 30;
                      var sub = data["x"] + data["y"];
                      var letters = ["A", "B", "C", "D", "E", "F", "G", "H",
                                     "I", "J", "K", "L", "M", "N", "O", "P",
                                     "Q", "R", "S", "T", "U", "V", "W", "X",
                                     "Y", "Z"];
                      // Create SVG element

                      var graph = d3.select("#content-core")
                              .append("div")
                              .attr("id", "graphic")
                              .attr("class", "graphic");

                      var svg = d3.select("#graphic")
                                  .append("svg")
                                  .attr("width", w)
                                  .attr("height", h);

                      var totalg = parseInt(sub + data["positions"].length);

                      var gp = svg.selectAll("g")
                              .data(d3.range(totalg))
                              .enter()
                              .append("g")
                              .attr("i", function(d, i){
                                  return i;
                              })
                              .attr("class", function (d) {
                                   if (d < data["x"])
                                       return "x-labels";
                                   else if (d >= data["x"] && d < parseInt(data["x"] + data["y"])) {
                                       return "y-labels";
                                   }else return "graph-svg";
                              })
                              .on("click", function () {
                                  gp.classed("on", false);
                                  d3.select(this).classed("on", true);
                              });

                      var xLabels = svg.selectAll("g.x-labels");
                      var yLabels = svg.selectAll("g.y-labels");
                      var graphSVG = svg.selectAll("g.graph-svg")
                                        .data(data["positions"]);

                      xLabels.selectAll("text")
                              .data(function () {
                                  return [d3.select(this.parentNode).datum()];
                              })
                              .enter()
                              .append("text")
                              .text(function(d){
                                  return d;
                              })
                              .attr("x", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  var x = i % data["x"] * Math.floor((w - marginLeft) / data["x"]) + marginLeft;
                                  var width = (w - marginLeft) / data["x"] - padding;
                                  return x + width / 2;
                              })
                              .attr("y", function(d, i){
                                  return marginTop - 10;
                              });

                      yLabels.selectAll("text")
                              .data(function () {
                                  return [d3.select(this.parentNode).datum()];
                              })
                              .enter()
                              .append("text")
                              .text(function(d){
                                  return letters[d - data["y"]];
                              })
                              .attr("x", function(d, i){
                                  return marginLeft - 20;
                              })
                              .attr("y", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  var y = (i - data["y"]) % data["y"] * Math.floor((h - marginTop) / data["y"]) + marginTop;
                                  var width = (h - marginTop) / data["y"] - padding;
                                  return y + width / 2;
                              });


                      graphSVG.selectAll("rect")
                              .data(function () {
                                  return [d3.select(this.parentNode).datum()];
                              })
                              .enter()
                              .append("rect")
                              .attr("x", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  return (i - sub) % data["x"] * Math.floor((w - marginLeft) / data["x"]) + marginLeft;
                              })
                              .attr("y", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  return Math.floor((i - sub) / data["y"]) * (h - marginTop) / data["y"] + marginTop;
                              })
                              .attr("width", function(d) {
                                  return (w - marginLeft) / data["y"] - padding;
                              })
                              .attr("height", function(d){
                                  return (h - marginTop) / data["x"] - padding;
                              })
                              .attr("fill", function(d){
                                  return "#dadada";
                              })
                              .style("stroke", "#eee")
                              .style("fill-opacity", .7);

                      graphSVG.selectAll("circle")
                              .data(function () {
                                  return [d3.select(this.parentNode).datum()];
                              })
                              .enter()
                              .append("circle")
                              .attr("cx", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  var x = (i - sub) % data["x"] * Math.floor((w - marginLeft) / data["x"]) + marginLeft;
                                  var width = (w - marginLeft) / data["x"] - padding;
                                  return x + width / 2;
                              })
                              .attr("cy", function(d){
                                  var i = d3.select(this.parentNode).attr("i");
                                  var y = Math.floor((i - sub) / data["y"]) * (h - marginTop) / data["x"] + marginTop;
                                  var height = (h - marginTop) / data["y"] - padding;
                                  return y + height / 2;
                              })
                              .attr("r", function(d){
                                  var width = (w - marginLeft) / data["x"] - padding;
                                  var height = (h - marginTop) / data["y"] - padding;
                                  return d3.max([width / 2 - 2*padding, height / 2 - 2*padding])
                              })
                              .attr("fill", function(d){
                                  switch (d["state"]){
                                      case 'position_free':
                                          return "#32ce16";
                                          break;
                                      case 'position_reserved':
                                          return "#39cccc";
                                          break;
                                      case 'position_occupied':
                                          return "#fc7871";
                                          break;
                                      default:
                                          break;
                                  }
                              })
                              .style("fill-opacity", .5)
                              .on('click', function(d){
                                  positionInfo(this, d);
                              });


/*
                      gp.selectAll("rect")
                          .data(data['positions'])
                          .enter()
                          .append("rect")
                          .attr("x", function(d, i){
                              return i % data["x"] * Math.floor(w / data["y"]);
                          })
                          .attr("y", function(d, i){
                              return Math.floor(i / data["y"]) * h / data["x"];
                          })
                          .attr("width", function(d) {
                              return w / data["y"] - padding;
                          })
                          .attr("height", function(d){
                              return h / data["x"] - padding;
                          })
                          .attr("fill", function(d){
                              return "blue";
                          })
                          .style("stroke", "red")
                          .style("fill-opacity", .2);


                      gp.selectAll("circle")
                              .data(data["positions"])
                              .enter()
                              .append("circle")
                              .attr("cx", function(d, i){
                                  var x = i % data["x"] * Math.floor(w / data["y"]);
                                  var width = w / data["y"] - padding;
                                  return x + width / 2;
                              })
                              .attr("cy", function(d, i){
                                  var y = Math.floor(i / data["y"]) * h / data["x"];
                                  var height = h / data["x"] - padding;
                                  return y + height / 2;
                              })
                              .attr("r", function(d, i){
                                  var width = w / data["y"] - padding;
                                  var height = h / data["x"] - padding;
                                  return d3.max([width / 2 - 2*padding, height / 2 - 2*padding])
                              })
                              .attr("fill", function(d){
                                  if(d["occupied"])
                                      return "red";
                                  else
                                      return "green";
                              })
                              .style("fill-opacity", .4)
                              .on('click', function(d){
                                  //TODO: CHECK HOW TO GET PARENTNODE TO STYLE IT IN CASE IT GET FOCUS
                                  //TODO: WHEN CLICKED.
                                  positionInfo(this, d);
                              });

                      gp.selectAll("text")
                              .data(data["positions"])
                              .enter()
                              .append("text")
                              .text(function(d, i){
                                  var chain = d["id"].split(".");
                                  return chain[chain.length - 1];
                              })
                              .attr("x", function(d, i){
                                  var x = i % data["x"] * Math.floor(w / data["y"]);
                                  var width = w / data["y"] - padding;
                                  return x + width / 2;
                              })
                              .attr("y", function(d, i){
                                  var y = Math.floor(i / data["y"]) * h / data["x"];
                                  var height = h / data["x"] - padding;
                                  return y + height / 2;
                              })
                              .style("font-family", "sans-serif")
                              .style("font-size", "11px")
                              .style("fill", "white");*/
                  }
              });
            })(jQuery);
        </script>
    </metal:javascript_head_slot>
    <metal:block fill-slot="style_slot">
        <tal:css>
        <style type="text/css">
            rect:hover{
                fill: orange;
            }
            rect {
                -moz-transition: all 0.3s;
                -o-transition: all 0.3s;
                -webkit-transition: all 0.3s;
                transition: all 0.3s;
            }
            circle:hover{
                fill: black;
            }
            g.on > rect{
                fill:orange;
            }
            #content-core > div:first-of-type{
                float: left;
                clear: none;
                margin: 20px 0;
                width: 30%;
            }
            div.table-info{
                border-left-style: groove;
                border-left-color: green;
                border-left-width: 15px;
                border-bottom-style: ridge;
                border-bottom-color: yellow;
                border-bottom-width: 25px;
            }
            span.head-text{
                font-family: sans-serif;
                font-size: 14px;
                font-weight: bold;
            }
            div.table-info table {
                border: solid 1px #DDEEEE;
                border-collapse: collapse;
                border-spacing: 0;
                font: normal 13px Arial, sans-serif;
                width:100%;
            }
            div.table-info table tbody td {
                border: solid 1px #DDEEEE;
                color: #333;
                padding: 10px;
                text-shadow: 1px 1px 1px #fff;
            }

            div#graphic{
                margin: 20px 30px;
                float: left;
                width: 50%;
            }
            .hidden{
                display: none;
            }
        </style>
        </tal:css>
    </metal:block>

</head>

<body>

<metal:title fill-slot="content-title">
</metal:title>

<metal:content-description fill-slot="content-description">
</metal:content-description>

<div metal:fill-slot="content-core"
     tal:define="
        portal context/@@plone_portal_state/portal;">
    <div id="stats" class="table-info">
        <img tal:attributes='src python:portal.absolute_url()+"/++resource++bika.sanbi.images/graph_big.png"'/>
        <span class="head-text">Statistics</span>
    </div>
    <div id="pos-info-div" class="table-info hidden">
        <img tal:attributes='src python:portal.absolute_url()+"/++resource++bika.sanbi.images/location_big.png"'/>
        <span class="head-text">Position</span>
    </div>
    <div class="wrapper hidden">
        I have a tooltip.
        <div class="tooltip">I am a tooltip!</div>
    </div>
</div>


</body>

</html>